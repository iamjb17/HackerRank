import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

/*
Still has some bugs
A is Answer
R is My code results
test 1: A=1 R=2(wrong)
7
AUzs-nV

Test 2: A=3 R=2 (wrong)
4
goxg
*/

    static int minimumNumber(int n, String password) {
        // Return the minimum number of characters to make the password strong
        int matchesFound = 4;
        Pattern upperCaseL = Pattern.compile("(?=.*[A-Z]+)");
        Pattern lowerCaseL = Pattern.compile("(?=.*[a-z]+)");
        Pattern anyNumber = Pattern.compile("(?=.*[0-9]+)");
        Pattern anySpecialCh = Pattern.compile("(?=.*[!@#$%^&*()-+]+)");
        Matcher matcherUCL = upperCaseL.matcher(password);
        Matcher matcherLCL = lowerCaseL.matcher(password);
        Matcher matcherAN = anyNumber.matcher(password);
        Matcher matcherASC = anySpecialCh.matcher(password);
        
        if(password.isEmpty() || password == null){
            return 6;
        } else if (n < 6) {
            return 6-n;
        } else 
            if (matcherUCL.find()){
                matchesFound--;
            } if (matcherLCL.find()){
                matchesFound--;
            } if (matcherAN.find()){
                matchesFound--;
            } if (matcherASC.find()){
                matchesFound--;
            }
            return matchesFound;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        String password = in.next();
        int answer = minimumNumber(n, password);
        System.out.println(answer);
        in.close();
    }
    /////////////////////////////////////////////////////////////////////
    // still has problem Test 4 4700 A: 3 R:
            int temp =0;
        if(password.isEmpty() || password == null) {
            return 6;
        } if (n < 6) {
            if (checkChar(password) == 0) {
                return 6 - n;
            } else if (checkChar(password) + n != 6) {
                temp = checkChar(password) + n;
                return (6-temp) + checkChar(password);
            }
            return 6 - checkChar(password);
        }            
        return checkChar(password);
    }
    
    private static int checkChar(String password) {
        int matchesFound = 0;
        Pattern upperCaseL = Pattern.compile("(?=.*[A-Z]+)");
        Pattern lowerCaseL = Pattern.compile("(?=.*[a-z]+)");
        Pattern anyNumber = Pattern.compile("(?=.*[0-9]+)");
        Pattern anySpecialCh = Pattern.compile("(?=.*[!@#$%^&*()\\-+]+)");
        Matcher matcherUCL = upperCaseL.matcher(password);
        Matcher matcherLCL = lowerCaseL.matcher(password);
        Matcher matcherAN = anyNumber.matcher(password);
        Matcher matcherASC = anySpecialCh.matcher(password);
        
        if (!matcherUCL.find()){
                matchesFound++;
            } if (!matcherLCL.find()){
                matchesFound++;
            } if (!matcherAN.find()){
                matchesFound++;
            } if (!matcherASC.find()){
                matchesFound++;
            }
            return matchesFound;
        
}
